<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出。
    scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为 true。
    scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
 -->
<configuration scan="false" scanPeriod="10000" debug="false">
    <contextName>logback-spring</contextName>

    <!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义后，可以使“${}”来使用变量。 -->
    <!-- 定义日志保存路径，绝对路径设置如【E:/logs】相对路径如下
        【logs】：表示保存到程序运行目录，在tomcat中为bin目录
        【/logs】：表示保存到系统目录，及当前项目所在系统盘目录
        【../logs】：表示保存到程序运行目录的父目录
     -->
    <property name="LOG_PATH" value="logs" />

    <!-- 彩色日志 格式
        日志级别颜色：FATAL/ERROR - red; WARN - yellow; INFO/DEBUG/TRACE - green;
        日志支持颜色：blue; cyan:青色; faint; green; magenta:洋红; red; yellow; white:白色;
        注：highlight;black;red;green;yellow;blue;magenta;cyan;white;gray;boldRed;boldGreen;boldYellow;boldBlue;boldMagenta;boldCyan;boldWhite;
        格式：%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %thread %logger{50} %msg %n
            %d：表示日期时间；
            %-5level：级别从左显示5个字符宽度，显示日志级别；
            %thread：执行的线程名；     %-4relative：；
            %file：执行文档名称；       %line：执行代码行数；
            %logger{50}：表示logger名字最长50个字符，否则按照句点分割；
            %msg:日志消息；              %n是换行符；
            data(d);level(p,le);relative(r); thred(t); logger(c,lo);message(m,msg);n;
            file(F);line(L);class(C);method(M);property;
            contextName(cn);marker;caller; mdc(X);nopexception(nopex);
            throwable;exception(ex);rootException(rEx);xException(xEx,xThrowable);
     -->
    <property name="CONSOLE_LOG_PATTERN" value="%(%d{yyyy-MM-dd HH:mm:ss.SSS})  %highlight(%-5level) %magenta(%relative) --- %yellow([%15thread]) %cyan(%logger{50}) : %gray(%msg %n)"/>
    <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS}  %-5level %6relative [%15thread] %file %-4line ===》%logger{50} : %msg %n" />
    <!-- 详细打印信息 -->
    <property name="LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS}  %-5level %6relative [%15thread] %file %-4line ===》%logger{50} : %msg %n" />
    <property name="LOG_COLOR_PATTERN"
              value="%(%d{yyyy-MM-dd HH:mm:ss.SSS})  %highlight(%-5level) %magenta(%relative) --- %yellow([%15thread]) %cyan(%logger{50}) : %gray(%msg %n)" />
    <!--默认打印格式-->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <property name="DEFAULT_CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <property name="DEFAULT_FILE_LOG_PATTERN" value="${FILE_LOG_PATTERN:-%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>



    <!-- 日志 控制台输出 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 此日志为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
        <!-- 日志文档输出格式，两种实现方式 -->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- springProfile：name：表示日志执行的配置环境 -->
        <!--<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"></encoder>-->
        <!--<layout class="ch.qos.logback.classic.PatternLayout">
            <springProfile name="dev">
                <pattern>${LOG_PATTERN}</pattern>
            </springProfile>
            <springProfile name="!dev">
                <pattern>${LOG_PATTERN}</pattern>
            </springProfile>
        </layout>-->
    </appender>

    <!-- 日志 文档输出；滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件，可按天生成日志文件 -->
    <appender name="LOG_DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 记录日志文档的路径及文档名 -->
        <file>${LOG_PATH}/log_debug.log</file>
        <!-- 日志文档输出格式，两种实现方式 -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--<layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </layout>-->
        <!-- 日志记录器的滚动策略，按日期，按大小记录
            当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
            TimeBasedRollingPolicy：最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动
         -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/log-%d{yyyy-MM-dd_HH}/log-debug-%d{HH-mm}.%i.log</fileNamePattern>
            <!-- 当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动
                注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy
             -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文档保留最大数量，控制保留的归档文件，超出数量就删除旧文件，可选节点
                假设设置每天滚动，且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件，那些为了归档而创建的目录也会被删除
             -->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <!-- 日志文档记录级别 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>debug</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <appender name="LOG_INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/log_info.log</file>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/log-%d{yyyy-MM-dd_HH}/log-info-%d{HH-mm}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <appender name="LOG_WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/log_warn.log</file>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/log-%d{yyyy-MM-dd_HH}/log-warn-%d{HH-mm}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>warn</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <appender name="LOG_ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/log_error.log</file>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/log-%d{yyyy-MM-dd_HH}/log-error-%d{HH-mm}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 生产环境:打印控制台 -->
    <springProfile name="pro">
        <!-- 用来指定某些目录输出日志级别，与root不影响
            可选节点，用来设置某一个包或者具体的类的日志输出级别以及指定<appender> ，如果不设置，则会交个root配置的appender处理；
            <logger>主要用于存放日志对象，也可以定义日志类型、级别
            name：用来指定受此logger约束的某一个包或者具体的某一个类
            level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR，ALL、OFF
                还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别
                如果未设置此属性，那么当前logger将会继承上级的级别
            additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
            false：表示只用当前logger的appender-ref，true 表示当前logger的appender-ref和rootLogger的appender-ref都有效
        -->
        <!-- 输出项目中日志， 使用mybatis的时候，sql语句是debug下才会打印
            第一种把<root level="info">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息
            第二种就是单独给dao下目录配置debug模式，这样配置sql语句会打印，其他还是正常info级别
            【logging.level.org.mybatis=debug logging.level.dao=debug】
         -->
        <logger name="com.mgodk.biz" level="debug" />
        <logger name="com.mgodk.web" level="info" />
        <!-- 用来指定输出的日志为级别及模板内容，表示拥有的日志模板和能输出的日志级别，相当于全局日志输出
            必选节点，用来指定最基础的日志输出级别，只有一个level属性
            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG，不能设置为INHERITED或者同义词NULL
            可以包含多个元素，标识这个 appender 将会添加到这个logger
            root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应
            要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level
        -->
        <root level="info">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="LOG_DEBUG_FILE" />
            <appender-ref ref="LOG_INFO_FILE" />
            <appender-ref ref="LOG_WARN_FILE" />
            <appender-ref ref="LOG_ERROR_FILE" />
        </root>
    </springProfile>

    <!-- 开发环境:打印控制台 -->
    <springProfile name="dev">
        <!-- 可以输出项目中的debug日志，包括mybatis的sql日志 -->
        <logger name="com.mgodk.biz" level="debug" />
        <logger name="com.mgodk.web" level="info" />
        <root level="info">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="LOG_DEBUG_FILE" />
            <appender-ref ref="LOG_INFO_FILE" />
            <appender-ref ref="LOG_WARN_FILE" />
            <appender-ref ref="LOG_ERROR_FILE" />
        </root>
    </springProfile>

</configuration>
